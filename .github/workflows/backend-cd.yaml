name: 'Project-Movie-Picture-Pipeline-CI-backend'
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

env:
  AWS_REGION : "us-east-1"

permissions:
      id-token: write
      contents: read

jobs:
  linting-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: cd backend && pip install pipenv && pipenv install --dev

      - name: Lint code
        run: cd backend && pipenv run flake8

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies and run test
        run: cd backend && pip install pipenv && pipenv install --dev && pipenv run pytest

  build-backend:
    needs: [linting-backend, test-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies and run test
        run: cd backend && pip install pipenv && pipenv install --dev && pipenv run pytest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: movie-picture-pipeline
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend && docker build . -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Install kubectl
        run: sudo apt-get update && sudo apt-get install -y kubectl

      - name: Deploy application to EKS
        run: cd backend && kubectl apply -f k8s/ --validate=false